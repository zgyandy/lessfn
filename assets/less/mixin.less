// out: false
@charset "utf-8";
@import './var.less';
// 盒模型
.boxSizing(@box: border-box) {
  box-sizing: @box;
}
// 不适用设置多种shadow样式
.boxShadow (@x: 0; @y: 0; @blur: 0; @spread: 0; @color: #000; @inset: '') when(iscolor(@color)) {
  box-shadow: @x @y @blur @spread @color;
  & when(@inset = inset) {
    box-shadow: @arguments;
  }
}
// fixed
.fixed (@dir: center) {
  position: fixed;
  & when (@dir = center) {
    left: 50%;
    top: 50%;
    .transform(-50%, -50%);
  }
  & when (@dir = left) , (@dir = right) {
    & when (@dir = left) {
      left: 0;
    }
    & when (@dir = right) {
      right: 0;
    }
    top: 50%;
    .transform(0, -50%);
  }
  & when (@dir = bottom), (@dir = top) {
    & when (@dir = bottom) {
      bottom: 0;
    }
    & when (@dir = top) {
      top: 0;
    }
    left: 50%;
    .transform(-50%);
  }
}
// 偏移量
.transform (@x: 0; @y: 0) {
  transform: translate(@x, @y);
}
// flex
.flex(@justify: left; @align: center; @flexWrap: nowrap; @dir: row; @content: start) {
  display: flex;
  justify-content: @justify;
  align-items: @align;
  // The flex-wrap CSS property sets whether flex items are forced onto one line or can wrap onto multiple lines. If wrapping is allowed, it sets the direction that lines are stacked.
  flex-wrap: @flexWrap;
  // 轴方向
  flex-direction: @dir;
  // The CSS align-content property sets the distribution of space between and around content items along a flexbox's cross-axis or a grid's block axis.
  align-content: @content;
}
// 动画名 动画设置
.keyframes (@name; @options) {
  @keyframes @name {
    @options()
  }
}
// 动画 animation 是下面属性的一个简写属性形式。
// animation-name， 动画名称
// animation-duration, 动画时间
// animation-direction， 动画是否反向播放 normal alternate（交替反向运动） reverse（反向运动） alternate-reverse（反向交替， 反向开始交替）
// animation-delay， // 动画开始时间（延时）
// animation-timing-function， 动画运动方式（缓冲还是匀速等）对于关键帧动画来说，timing function作用于一个关键帧周期而非整个动画周期，即从关键帧开始开始，到关键帧结束结束。 若该关键帧没有定义缓动函数，则使用定义于整个动画的缓动函数。
// animation-iteration-count，// 动画
// animation-fill-mode // 动画运行次数
// animation-play-state // 动画状态 运行还是暂停
.animate(@name; @dur: 3s; @dir: normal; @delay: 0; @timing: linear; @iteration: infinite; @fill: none){
  animation-name: @name;
  animation-duration: @dur;
  animation-direction: @dir;
  animation-delay: @delay;
  animation-timing-function: @timing;
  animation-iteration-count: @iteration;
  animation-fill-mode: @fill;
}
// 动画状态默认停止
.playState(@state: paused) {
  animation-play-state: @state;
}
// input placeholder
.placeholder (@color: #000; @size: 12px; @style: normal; @variant: normal; @weight: normal; @family: inherit; @line: inherit) {
  input::placeholder {
    color: @color;
    font-size: @size;
    font-style: @style;
    font-weight: @weight;
    font-family: @family;
    line-height: @line;
  }
}
